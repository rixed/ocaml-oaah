# vim:ft=make
OCAMLC     = ocamlfind ocamlc
OCAMLOPT   = ocamlfind ocamlopt
OCAMLDEP   = ocamlfind ocamldep
INCS       =
OCAMLOPTFLAGS = $(INCS) -w Ae -g -annot
OCAMLFLAGS    = $(INCS) -w Ae -g -annot

CAMLINCLUDE = $(shell ocamlfind printconf stdlib)
CPPFLAGS += -I $(CAMLINCLUDE) -I .
CFLAGS += -std=c99 -W -Wall

# Common rules
.SUFFIXES: .ml .mli .cmo .cmi .cmx
# Rules for these are given in a case by case basis
.SUFFIXES: .byte .opt

ifdef WITH_OWN_LIB
OWN_LIB_BYTE = -I $(top_srcdir)
OWN_LIB_DEP_BYTE = $(top_srcdir)/$(WITH_OWN_LIB).cma
OWN_LIB_OPT = -I $(top_srcdir)
OWN_LIB_DEP_OPT = $(top_srcdir)/$(WITH_OWN_LIB).cmxa
endif

%.cmo: %.ml $(OWN_LIB_DEP_BYTE)
	$(OCAMLC) -package "$(REQUIRES)" $(OWN_LIB_BYTE) $(OCAMLFLAGS) -c $<

%.cmi: %.mli $(OWN_LIB_DEP_BYTE)
	$(OCAMLC) -package "$(REQUIRES)" $(OWN_LIB_BYTE) $(OCAMLFLAGS) -c $<

%.cmx: %.ml $(OWN_LIB_DEP_OPT)
	$(OCAMLOPT) -package "$(REQUIRES)" $(OWN_LIB_BYTE) $(OCAMLOPTFLAGS) -c $<

ML_OBJS  = $(ML_SOURCES:.ml=.cmo)
ML_XOBJS = $(ML_SOURCES:.ml=.cmx)

# Clean up
.PHONY: clean clean-spec distclean distclean-spec
clean: clean-spec
	$(RM) *.cm[io] *.a *.s *.o *.byte *.opt .depend

distclean: clean distclean-spec
	$(RM) *.cma *.cmxa *.cmx *.annot

# Dependencies
.depend: $(ML_SOURCES) $(C_SOURCES)
	$(OCAMLDEP) -package "$(REQUIRES)" -I .. $(ML_SOURCES) > $@
ifdef C_SOURCES
	$(CC) -M $(CPPFLAGS) $(C_SOURCES) >> $@
endif
